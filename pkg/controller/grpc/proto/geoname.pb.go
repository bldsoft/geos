// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: api/grpc/geoname.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GeoNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCodes []string `protobuf:"bytes,1,rep,name=country_codes,json=countryCodes,proto3" json:"country_codes,omitempty"`
	NamePrefix   string   `protobuf:"bytes,2,opt,name=name_prefix,json=namePrefix,proto3" json:"name_prefix,omitempty"`
}

func (x *GeoNameRequest) Reset() {
	*x = GeoNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoname_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoNameRequest) ProtoMessage() {}

func (x *GeoNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoname_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoNameRequest.ProtoReflect.Descriptor instead.
func (*GeoNameRequest) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoname_proto_rawDescGZIP(), []int{0}
}

func (x *GeoNameRequest) GetCountryCodes() []string {
	if x != nil {
		return x.CountryCodes
	}
	return nil
}

func (x *GeoNameRequest) GetNamePrefix() string {
	if x != nil {
		return x.NamePrefix
	}
	return ""
}

type GeoNameCountryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsoCode            string  `protobuf:"bytes,1,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	Iso3Code           string  `protobuf:"bytes,2,opt,name=iso3_code,json=iso3Code,proto3" json:"iso3_code,omitempty"`
	IsoNumeric         string  `protobuf:"bytes,3,opt,name=iso_numeric,json=isoNumeric,proto3" json:"iso_numeric,omitempty"`
	Fips               string  `protobuf:"bytes,4,opt,name=fips,proto3" json:"fips,omitempty"`
	Name               string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Capital            string  `protobuf:"bytes,6,opt,name=capital,proto3" json:"capital,omitempty"`
	Area               float64 `protobuf:"fixed64,7,opt,name=area,proto3" json:"area,omitempty"`
	Population         int64   `protobuf:"varint,8,opt,name=population,proto3" json:"population,omitempty"`
	Continent          string  `protobuf:"bytes,9,opt,name=continent,proto3" json:"continent,omitempty"`
	Tld                string  `protobuf:"bytes,10,opt,name=tld,proto3" json:"tld,omitempty"`
	CurrencyCode       string  `protobuf:"bytes,11,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	CurrencyName       string  `protobuf:"bytes,12,opt,name=currency_name,json=currencyName,proto3" json:"currency_name,omitempty"`
	Phone              string  `protobuf:"bytes,13,opt,name=phone,proto3" json:"phone,omitempty"`
	PostalCodeFormat   string  `protobuf:"bytes,14,opt,name=postal_code_format,json=postalCodeFormat,proto3" json:"postal_code_format,omitempty"`
	PostalCodeRegex    string  `protobuf:"bytes,15,opt,name=postal_code_regex,json=postalCodeRegex,proto3" json:"postal_code_regex,omitempty"`
	Languages          string  `protobuf:"bytes,16,opt,name=languages,proto3" json:"languages,omitempty"`
	GeoNameId          uint32  `protobuf:"varint,17,opt,name=geo_name_id,json=geoNameId,proto3" json:"geo_name_id,omitempty"`
	Neighbours         string  `protobuf:"bytes,18,opt,name=neighbours,proto3" json:"neighbours,omitempty"`
	EquivalentFipsCode string  `protobuf:"bytes,19,opt,name=equivalent_fips_code,json=equivalentFipsCode,proto3" json:"equivalent_fips_code,omitempty"`
}

func (x *GeoNameCountryResponse) Reset() {
	*x = GeoNameCountryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoname_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoNameCountryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoNameCountryResponse) ProtoMessage() {}

func (x *GeoNameCountryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoname_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoNameCountryResponse.ProtoReflect.Descriptor instead.
func (*GeoNameCountryResponse) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoname_proto_rawDescGZIP(), []int{1}
}

func (x *GeoNameCountryResponse) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *GeoNameCountryResponse) GetIso3Code() string {
	if x != nil {
		return x.Iso3Code
	}
	return ""
}

func (x *GeoNameCountryResponse) GetIsoNumeric() string {
	if x != nil {
		return x.IsoNumeric
	}
	return ""
}

func (x *GeoNameCountryResponse) GetFips() string {
	if x != nil {
		return x.Fips
	}
	return ""
}

func (x *GeoNameCountryResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GeoNameCountryResponse) GetCapital() string {
	if x != nil {
		return x.Capital
	}
	return ""
}

func (x *GeoNameCountryResponse) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *GeoNameCountryResponse) GetPopulation() int64 {
	if x != nil {
		return x.Population
	}
	return 0
}

func (x *GeoNameCountryResponse) GetContinent() string {
	if x != nil {
		return x.Continent
	}
	return ""
}

func (x *GeoNameCountryResponse) GetTld() string {
	if x != nil {
		return x.Tld
	}
	return ""
}

func (x *GeoNameCountryResponse) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GeoNameCountryResponse) GetCurrencyName() string {
	if x != nil {
		return x.CurrencyName
	}
	return ""
}

func (x *GeoNameCountryResponse) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GeoNameCountryResponse) GetPostalCodeFormat() string {
	if x != nil {
		return x.PostalCodeFormat
	}
	return ""
}

func (x *GeoNameCountryResponse) GetPostalCodeRegex() string {
	if x != nil {
		return x.PostalCodeRegex
	}
	return ""
}

func (x *GeoNameCountryResponse) GetLanguages() string {
	if x != nil {
		return x.Languages
	}
	return ""
}

func (x *GeoNameCountryResponse) GetGeoNameId() uint32 {
	if x != nil {
		return x.GeoNameId
	}
	return 0
}

func (x *GeoNameCountryResponse) GetNeighbours() string {
	if x != nil {
		return x.Neighbours
	}
	return ""
}

func (x *GeoNameCountryResponse) GetEquivalentFipsCode() string {
	if x != nil {
		return x.EquivalentFipsCode
	}
	return ""
}

type GeoNameSubdivisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AsciiName string `protobuf:"bytes,3,opt,name=ascii_name,json=asciiName,proto3" json:"ascii_name,omitempty"`
	GeoNameId uint32 `protobuf:"varint,4,opt,name=geo_name_id,json=geoNameId,proto3" json:"geo_name_id,omitempty"`
}

func (x *GeoNameSubdivisionResponse) Reset() {
	*x = GeoNameSubdivisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoname_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoNameSubdivisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoNameSubdivisionResponse) ProtoMessage() {}

func (x *GeoNameSubdivisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoname_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoNameSubdivisionResponse.ProtoReflect.Descriptor instead.
func (*GeoNameSubdivisionResponse) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoname_proto_rawDescGZIP(), []int{2}
}

func (x *GeoNameSubdivisionResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GeoNameSubdivisionResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GeoNameSubdivisionResponse) GetAsciiName() string {
	if x != nil {
		return x.AsciiName
	}
	return ""
}

func (x *GeoNameSubdivisionResponse) GetGeoNameId() uint32 {
	if x != nil {
		return x.GeoNameId
	}
	return 0
}

type GeoNameContinentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GeoNameId uint32 `protobuf:"varint,3,opt,name=geo_name_id,json=geoNameId,proto3" json:"geo_name_id,omitempty"`
}

func (x *GeoNameContinentResponse) Reset() {
	*x = GeoNameContinentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoname_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoNameContinentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoNameContinentResponse) ProtoMessage() {}

func (x *GeoNameContinentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoname_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoNameContinentResponse.ProtoReflect.Descriptor instead.
func (*GeoNameContinentResponse) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoname_proto_rawDescGZIP(), []int{3}
}

func (x *GeoNameContinentResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GeoNameContinentResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GeoNameContinentResponse) GetGeoNameId() uint32 {
	if x != nil {
		return x.GeoNameId
	}
	return 0
}

type GeoNameCityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeoNameId             uint32  `protobuf:"varint,1,opt,name=geo_name_id,json=geoNameId,proto3" json:"geo_name_id,omitempty"`
	Name                  string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AsciiName             string  `protobuf:"bytes,3,opt,name=ascii_name,json=asciiName,proto3" json:"ascii_name,omitempty"`
	Latitude              float64 `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude             float64 `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Class                 string  `protobuf:"bytes,6,opt,name=class,proto3" json:"class,omitempty"`
	Code                  string  `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	CountryCode           string  `protobuf:"bytes,8,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	AlternateCountryCodes string  `protobuf:"bytes,9,opt,name=alternate_country_codes,json=alternateCountryCodes,proto3" json:"alternate_country_codes,omitempty"`
	Admin1Code            string  `protobuf:"bytes,10,opt,name=admin1_code,json=admin1Code,proto3" json:"admin1_code,omitempty"`
	Admin2Code            string  `protobuf:"bytes,11,opt,name=admin2_code,json=admin2Code,proto3" json:"admin2_code,omitempty"`
	Admin3Code            string  `protobuf:"bytes,12,opt,name=admin3_code,json=admin3Code,proto3" json:"admin3_code,omitempty"`
	Admin4Code            string  `protobuf:"bytes,13,opt,name=admin4_code,json=admin4Code,proto3" json:"admin4_code,omitempty"`
	Population            int64   `protobuf:"varint,14,opt,name=population,proto3" json:"population,omitempty"`
	Elevation             int64   `protobuf:"varint,15,opt,name=elevation,proto3" json:"elevation,omitempty"`
	DigitalElevationModel int64   `protobuf:"varint,16,opt,name=digital_elevation_model,json=digitalElevationModel,proto3" json:"digital_elevation_model,omitempty"`
	TimeZone              string  `protobuf:"bytes,17,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
}

func (x *GeoNameCityResponse) Reset() {
	*x = GeoNameCityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoname_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoNameCityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoNameCityResponse) ProtoMessage() {}

func (x *GeoNameCityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoname_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoNameCityResponse.ProtoReflect.Descriptor instead.
func (*GeoNameCityResponse) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoname_proto_rawDescGZIP(), []int{4}
}

func (x *GeoNameCityResponse) GetGeoNameId() uint32 {
	if x != nil {
		return x.GeoNameId
	}
	return 0
}

func (x *GeoNameCityResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GeoNameCityResponse) GetAsciiName() string {
	if x != nil {
		return x.AsciiName
	}
	return ""
}

func (x *GeoNameCityResponse) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GeoNameCityResponse) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GeoNameCityResponse) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *GeoNameCityResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GeoNameCityResponse) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *GeoNameCityResponse) GetAlternateCountryCodes() string {
	if x != nil {
		return x.AlternateCountryCodes
	}
	return ""
}

func (x *GeoNameCityResponse) GetAdmin1Code() string {
	if x != nil {
		return x.Admin1Code
	}
	return ""
}

func (x *GeoNameCityResponse) GetAdmin2Code() string {
	if x != nil {
		return x.Admin2Code
	}
	return ""
}

func (x *GeoNameCityResponse) GetAdmin3Code() string {
	if x != nil {
		return x.Admin3Code
	}
	return ""
}

func (x *GeoNameCityResponse) GetAdmin4Code() string {
	if x != nil {
		return x.Admin4Code
	}
	return ""
}

func (x *GeoNameCityResponse) GetPopulation() int64 {
	if x != nil {
		return x.Population
	}
	return 0
}

func (x *GeoNameCityResponse) GetElevation() int64 {
	if x != nil {
		return x.Elevation
	}
	return 0
}

func (x *GeoNameCityResponse) GetDigitalElevationModel() int64 {
	if x != nil {
		return x.DigitalElevationModel
	}
	return 0
}

func (x *GeoNameCityResponse) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

var File_api_grpc_geoname_proto protoreflect.FileDescriptor

var file_api_grpc_geoname_proto_rawDesc = []byte{
	0x0a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65, 0x6f, 0x6e, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x67, 0x65, 0x6f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x56, 0x0a, 0x0e, 0x47, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0xe1, 0x04, 0x0a, 0x16, 0x47, 0x65,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x6f, 0x33, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x6f, 0x33, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x73, 0x6f, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x70,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x61,
	0x72, 0x65, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x67,
	0x65, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x67, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x65,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x70, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x70, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x83, 0x01,
	0x0a, 0x1a, 0x47, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x63, 0x69, 0x69, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x63, 0x69, 0x69, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x65, 0x6f, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x18, 0x47, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x65,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xbe, 0x04, 0x0a, 0x13, 0x47, 0x65, 0x6f, 0x4e,
	0x61, 0x6d, 0x65, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x63, 0x69, 0x69, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x63, 0x69, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6c, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x31, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x31, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x32, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x32, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x33, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x33,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x34, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x34, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x45, 0x6c, 0x65,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x32, 0xb2, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x67, 0x65, 0x6f, 0x6e, 0x61,
	0x6d, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x67, 0x65, 0x6f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x4e,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x45, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x17, 0x2e, 0x67, 0x65, 0x6f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x65, 0x6f,
	0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x3f, 0x0a,
	0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x17, 0x2e, 0x67, 0x65, 0x6f, 0x6e, 0x61, 0x6d, 0x65, 0x2e,
	0x47, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x67, 0x65, 0x6f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
	0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x4d,
	0x0a, 0x0b, 0x53, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e,
	0x67, 0x65, 0x6f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x65, 0x6f, 0x6e, 0x61, 0x6d, 0x65,
	0x2e, 0x47, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x0a, 0x5a,
	0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_grpc_geoname_proto_rawDescOnce sync.Once
	file_api_grpc_geoname_proto_rawDescData = file_api_grpc_geoname_proto_rawDesc
)

func file_api_grpc_geoname_proto_rawDescGZIP() []byte {
	file_api_grpc_geoname_proto_rawDescOnce.Do(func() {
		file_api_grpc_geoname_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_grpc_geoname_proto_rawDescData)
	})
	return file_api_grpc_geoname_proto_rawDescData
}

var file_api_grpc_geoname_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_api_grpc_geoname_proto_goTypes = []interface{}{
	(*GeoNameRequest)(nil),             // 0: geoname.GeoNameRequest
	(*GeoNameCountryResponse)(nil),     // 1: geoname.GeoNameCountryResponse
	(*GeoNameSubdivisionResponse)(nil), // 2: geoname.GeoNameSubdivisionResponse
	(*GeoNameContinentResponse)(nil),   // 3: geoname.GeoNameContinentResponse
	(*GeoNameCityResponse)(nil),        // 4: geoname.GeoNameCityResponse
}
var file_api_grpc_geoname_proto_depIdxs = []int32{
	0, // 0: geoname.GeoNameService.Continent:input_type -> geoname.GeoNameRequest
	0, // 1: geoname.GeoNameService.Country:input_type -> geoname.GeoNameRequest
	0, // 2: geoname.GeoNameService.City:input_type -> geoname.GeoNameRequest
	0, // 3: geoname.GeoNameService.Subdivision:input_type -> geoname.GeoNameRequest
	3, // 4: geoname.GeoNameService.Continent:output_type -> geoname.GeoNameContinentResponse
	1, // 5: geoname.GeoNameService.Country:output_type -> geoname.GeoNameCountryResponse
	4, // 6: geoname.GeoNameService.City:output_type -> geoname.GeoNameCityResponse
	2, // 7: geoname.GeoNameService.Subdivision:output_type -> geoname.GeoNameSubdivisionResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_grpc_geoname_proto_init() }
func file_api_grpc_geoname_proto_init() {
	if File_api_grpc_geoname_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_grpc_geoname_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoname_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoNameCountryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoname_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoNameSubdivisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoname_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoNameContinentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoname_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoNameCityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_grpc_geoname_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_grpc_geoname_proto_goTypes,
		DependencyIndexes: file_api_grpc_geoname_proto_depIdxs,
		MessageInfos:      file_api_grpc_geoname_proto_msgTypes,
	}.Build()
	File_api_grpc_geoname_proto = out.File
	file_api_grpc_geoname_proto_rawDesc = nil
	file_api_grpc_geoname_proto_goTypes = nil
	file_api_grpc_geoname_proto_depIdxs = nil
}
