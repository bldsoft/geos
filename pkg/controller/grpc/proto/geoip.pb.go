// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: api/grpc/geoip.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *IpRequest) Reset() {
	*x = IpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRequest) ProtoMessage() {}

func (x *IpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRequest.ProtoReflect.Descriptor instead.
func (*IpRequest) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{0}
}

func (x *IpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type CountryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Continent          *Continent          `protobuf:"bytes,1,opt,name=continent,proto3" json:"continent,omitempty"`
	Country            *Country            `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	RegisteredCountry  *Country            `protobuf:"bytes,3,opt,name=registered_country,json=registeredCountry,proto3" json:"registered_country,omitempty"`
	RepresentedCountry *RepresentedCountry `protobuf:"bytes,4,opt,name=represented_country,json=representedCountry,proto3" json:"represented_country,omitempty"`
	Traits             *Traits             `protobuf:"bytes,5,opt,name=traits,proto3" json:"traits,omitempty"`
}

func (x *CountryResponse) Reset() {
	*x = CountryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryResponse) ProtoMessage() {}

func (x *CountryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryResponse.ProtoReflect.Descriptor instead.
func (*CountryResponse) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{1}
}

func (x *CountryResponse) GetContinent() *Continent {
	if x != nil {
		return x.Continent
	}
	return nil
}

func (x *CountryResponse) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *CountryResponse) GetRegisteredCountry() *Country {
	if x != nil {
		return x.RegisteredCountry
	}
	return nil
}

func (x *CountryResponse) GetRepresentedCountry() *RepresentedCountry {
	if x != nil {
		return x.RepresentedCountry
	}
	return nil
}

func (x *CountryResponse) GetTraits() *Traits {
	if x != nil {
		return x.Traits
	}
	return nil
}

type CityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City               *City               `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	Continent          *Continent          `protobuf:"bytes,2,opt,name=continent,proto3" json:"continent,omitempty"`
	Country            *Country            `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Location           *Location           `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Postal             *Postal             `protobuf:"bytes,5,opt,name=postal,proto3" json:"postal,omitempty"`
	RegisteredCountry  *Country            `protobuf:"bytes,6,opt,name=registered_country,json=registeredCountry,proto3" json:"registered_country,omitempty"`
	RepresentedCountry *RepresentedCountry `protobuf:"bytes,7,opt,name=represented_country,json=representedCountry,proto3" json:"represented_country,omitempty"`
	Subdivisions       []*Subdivision      `protobuf:"bytes,8,rep,name=subdivisions,proto3" json:"subdivisions,omitempty"`
	Traits             *Traits             `protobuf:"bytes,9,opt,name=traits,proto3" json:"traits,omitempty"`
}

func (x *CityResponse) Reset() {
	*x = CityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityResponse) ProtoMessage() {}

func (x *CityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityResponse.ProtoReflect.Descriptor instead.
func (*CityResponse) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{2}
}

func (x *CityResponse) GetCity() *City {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *CityResponse) GetContinent() *Continent {
	if x != nil {
		return x.Continent
	}
	return nil
}

func (x *CityResponse) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *CityResponse) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CityResponse) GetPostal() *Postal {
	if x != nil {
		return x.Postal
	}
	return nil
}

func (x *CityResponse) GetRegisteredCountry() *Country {
	if x != nil {
		return x.RegisteredCountry
	}
	return nil
}

func (x *CityResponse) GetRepresentedCountry() *RepresentedCountry {
	if x != nil {
		return x.RepresentedCountry
	}
	return nil
}

func (x *CityResponse) GetSubdivisions() []*Subdivision {
	if x != nil {
		return x.Subdivisions
	}
	return nil
}

func (x *CityResponse) GetTraits() *Traits {
	if x != nil {
		return x.Traits
	}
	return nil
}

type Continent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      string            `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	GeoNameId uint32            `protobuf:"varint,2,opt,name=geo_name_id,json=geoNameId,proto3" json:"geo_name_id,omitempty"`
	Names     map[string]string `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Continent) Reset() {
	*x = Continent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Continent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Continent) ProtoMessage() {}

func (x *Continent) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Continent.ProtoReflect.Descriptor instead.
func (*Continent) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{3}
}

func (x *Continent) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Continent) GetGeoNameId() uint32 {
	if x != nil {
		return x.GeoNameId
	}
	return 0
}

func (x *Continent) GetNames() map[string]string {
	if x != nil {
		return x.Names
	}
	return nil
}

type Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeoNameId         uint32            `protobuf:"varint,1,opt,name=geo_name_id,json=geoNameId,proto3" json:"geo_name_id,omitempty"`
	IsInEuropeanUnion bool              `protobuf:"varint,2,opt,name=is_in_european_union,json=isInEuropeanUnion,proto3" json:"is_in_european_union,omitempty"`
	IsoCode           string            `protobuf:"bytes,3,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	Names             map[string]string `protobuf:"bytes,4,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Country) Reset() {
	*x = Country{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{4}
}

func (x *Country) GetGeoNameId() uint32 {
	if x != nil {
		return x.GeoNameId
	}
	return 0
}

func (x *Country) GetIsInEuropeanUnion() bool {
	if x != nil {
		return x.IsInEuropeanUnion
	}
	return false
}

func (x *Country) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *Country) GetNames() map[string]string {
	if x != nil {
		return x.Names
	}
	return nil
}

type RepresentedCountry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeoNameId         uint32            `protobuf:"varint,1,opt,name=geo_name_id,json=geoNameId,proto3" json:"geo_name_id,omitempty"`
	IsInEuropeanUnion bool              `protobuf:"varint,2,opt,name=is_in_european_union,json=isInEuropeanUnion,proto3" json:"is_in_european_union,omitempty"`
	IsoCode           string            `protobuf:"bytes,3,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	Names             map[string]string `protobuf:"bytes,4,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Type              string            `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *RepresentedCountry) Reset() {
	*x = RepresentedCountry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepresentedCountry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepresentedCountry) ProtoMessage() {}

func (x *RepresentedCountry) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepresentedCountry.ProtoReflect.Descriptor instead.
func (*RepresentedCountry) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{5}
}

func (x *RepresentedCountry) GetGeoNameId() uint32 {
	if x != nil {
		return x.GeoNameId
	}
	return 0
}

func (x *RepresentedCountry) GetIsInEuropeanUnion() bool {
	if x != nil {
		return x.IsInEuropeanUnion
	}
	return false
}

func (x *RepresentedCountry) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *RepresentedCountry) GetNames() map[string]string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *RepresentedCountry) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Traits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAnonymousProxy    bool `protobuf:"varint,1,opt,name=is_anonymous_proxy,json=isAnonymousProxy,proto3" json:"is_anonymous_proxy,omitempty"`
	IsSatelliteProvider bool `protobuf:"varint,2,opt,name=is_satellite_provider,json=isSatelliteProvider,proto3" json:"is_satellite_provider,omitempty"`
}

func (x *Traits) Reset() {
	*x = Traits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Traits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Traits) ProtoMessage() {}

func (x *Traits) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Traits.ProtoReflect.Descriptor instead.
func (*Traits) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{6}
}

func (x *Traits) GetIsAnonymousProxy() bool {
	if x != nil {
		return x.IsAnonymousProxy
	}
	return false
}

func (x *Traits) GetIsSatelliteProvider() bool {
	if x != nil {
		return x.IsSatelliteProvider
	}
	return false
}

type City struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeoNameId uint32            `protobuf:"varint,1,opt,name=geo_name_id,json=geoNameId,proto3" json:"geo_name_id,omitempty"`
	Names     map[string]string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *City) Reset() {
	*x = City{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *City) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*City) ProtoMessage() {}

func (x *City) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use City.ProtoReflect.Descriptor instead.
func (*City) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{7}
}

func (x *City) GetGeoNameId() uint32 {
	if x != nil {
		return x.GeoNameId
	}
	return 0
}

func (x *City) GetNames() map[string]string {
	if x != nil {
		return x.Names
	}
	return nil
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccuracyRadius uint32  `protobuf:"varint,1,opt,name=accuracy_radius,json=accuracyRadius,proto3" json:"accuracy_radius,omitempty"`
	Latitude       float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude      float64 `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	MetroCode      uint32  `protobuf:"varint,4,opt,name=metro_code,json=metroCode,proto3" json:"metro_code,omitempty"`
	TimeZone       string  `protobuf:"bytes,5,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{8}
}

func (x *Location) GetAccuracyRadius() uint32 {
	if x != nil {
		return x.AccuracyRadius
	}
	return 0
}

func (x *Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Location) GetMetroCode() uint32 {
	if x != nil {
		return x.MetroCode
	}
	return 0
}

func (x *Location) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

type Postal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Postal) Reset() {
	*x = Postal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Postal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Postal) ProtoMessage() {}

func (x *Postal) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Postal.ProtoReflect.Descriptor instead.
func (*Postal) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{9}
}

func (x *Postal) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type Subdivision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeoNameId uint32            `protobuf:"varint,1,opt,name=geo_name_id,json=geoNameId,proto3" json:"geo_name_id,omitempty"`
	IsoCode   string            `protobuf:"bytes,2,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	Names     map[string]string `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Subdivision) Reset() {
	*x = Subdivision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subdivision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subdivision) ProtoMessage() {}

func (x *Subdivision) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subdivision.ProtoReflect.Descriptor instead.
func (*Subdivision) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{10}
}

func (x *Subdivision) GetGeoNameId() uint32 {
	if x != nil {
		return x.GeoNameId
	}
	return 0
}

func (x *Subdivision) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *Subdivision) GetNames() map[string]string {
	if x != nil {
		return x.Names
	}
	return nil
}

var File_api_grpc_geoip_proto protoreflect.FileDescriptor

var file_api_grpc_geoip_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65, 0x6f, 0x69, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x22, 0x1b, 0x0a,
	0x09, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x9d, 0x02, 0x0a, 0x0f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x12, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x52, 0x06, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x22, 0xc7, 0x03, 0x0a, 0x0c, 0x43,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x65, 0x6f, 0x69,
	0x70, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e,
	0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x12, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x12, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x65,
	0x6f, 0x69, 0x70, 0x2e, 0x53, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a,
	0x06, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x52, 0x06, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x65, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xe0, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1e, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61,
	0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69,
	0x73, 0x49, 0x6e, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x65, 0x6f,
	0x69, 0x70, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a,
	0x0b, 0x67, 0x65, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x67, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x14, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x5f,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x49,
	0x6e, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70,
	0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x6a, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x41, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x69,
	0x73, 0x5f, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x53, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22,
	0x8e, 0x01, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67,
	0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xa9, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x1c, 0x0a, 0x06,
	0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x0b, 0x53,
	0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x65,
	0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x67, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73,
	0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x53, 0x75, 0x62,
	0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x32, 0x70, 0x0a, 0x0a, 0x47, 0x65, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x2e,
	0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12,
	0x10, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_grpc_geoip_proto_rawDescOnce sync.Once
	file_api_grpc_geoip_proto_rawDescData = file_api_grpc_geoip_proto_rawDesc
)

func file_api_grpc_geoip_proto_rawDescGZIP() []byte {
	file_api_grpc_geoip_proto_rawDescOnce.Do(func() {
		file_api_grpc_geoip_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_grpc_geoip_proto_rawDescData)
	})
	return file_api_grpc_geoip_proto_rawDescData
}

var file_api_grpc_geoip_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_api_grpc_geoip_proto_goTypes = []interface{}{
	(*IpRequest)(nil),          // 0: geoip.IpRequest
	(*CountryResponse)(nil),    // 1: geoip.CountryResponse
	(*CityResponse)(nil),       // 2: geoip.CityResponse
	(*Continent)(nil),          // 3: geoip.Continent
	(*Country)(nil),            // 4: geoip.Country
	(*RepresentedCountry)(nil), // 5: geoip.RepresentedCountry
	(*Traits)(nil),             // 6: geoip.Traits
	(*City)(nil),               // 7: geoip.City
	(*Location)(nil),           // 8: geoip.Location
	(*Postal)(nil),             // 9: geoip.Postal
	(*Subdivision)(nil),        // 10: geoip.Subdivision
	nil,                        // 11: geoip.Continent.NamesEntry
	nil,                        // 12: geoip.Country.NamesEntry
	nil,                        // 13: geoip.RepresentedCountry.NamesEntry
	nil,                        // 14: geoip.City.NamesEntry
	nil,                        // 15: geoip.Subdivision.NamesEntry
}
var file_api_grpc_geoip_proto_depIdxs = []int32{
	3,  // 0: geoip.CountryResponse.continent:type_name -> geoip.Continent
	4,  // 1: geoip.CountryResponse.country:type_name -> geoip.Country
	4,  // 2: geoip.CountryResponse.registered_country:type_name -> geoip.Country
	5,  // 3: geoip.CountryResponse.represented_country:type_name -> geoip.RepresentedCountry
	6,  // 4: geoip.CountryResponse.traits:type_name -> geoip.Traits
	7,  // 5: geoip.CityResponse.city:type_name -> geoip.City
	3,  // 6: geoip.CityResponse.continent:type_name -> geoip.Continent
	4,  // 7: geoip.CityResponse.country:type_name -> geoip.Country
	8,  // 8: geoip.CityResponse.location:type_name -> geoip.Location
	9,  // 9: geoip.CityResponse.postal:type_name -> geoip.Postal
	4,  // 10: geoip.CityResponse.registered_country:type_name -> geoip.Country
	5,  // 11: geoip.CityResponse.represented_country:type_name -> geoip.RepresentedCountry
	10, // 12: geoip.CityResponse.subdivisions:type_name -> geoip.Subdivision
	6,  // 13: geoip.CityResponse.traits:type_name -> geoip.Traits
	11, // 14: geoip.Continent.names:type_name -> geoip.Continent.NamesEntry
	12, // 15: geoip.Country.names:type_name -> geoip.Country.NamesEntry
	13, // 16: geoip.RepresentedCountry.names:type_name -> geoip.RepresentedCountry.NamesEntry
	14, // 17: geoip.City.names:type_name -> geoip.City.NamesEntry
	15, // 18: geoip.Subdivision.names:type_name -> geoip.Subdivision.NamesEntry
	0,  // 19: geoip.GeoService.Country:input_type -> geoip.IpRequest
	0,  // 20: geoip.GeoService.City:input_type -> geoip.IpRequest
	1,  // 21: geoip.GeoService.Country:output_type -> geoip.CountryResponse
	2,  // 22: geoip.GeoService.City:output_type -> geoip.CityResponse
	21, // [21:23] is the sub-list for method output_type
	19, // [19:21] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_api_grpc_geoip_proto_init() }
func file_api_grpc_geoip_proto_init() {
	if File_api_grpc_geoip_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_grpc_geoip_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Continent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Country); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepresentedCountry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Traits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*City); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Postal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subdivision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_grpc_geoip_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_grpc_geoip_proto_goTypes,
		DependencyIndexes: file_api_grpc_geoip_proto_depIdxs,
		MessageInfos:      file_api_grpc_geoip_proto_msgTypes,
	}.Build()
	File_api_grpc_geoip_proto = out.File
	file_api_grpc_geoip_proto_rawDesc = nil
	file_api_grpc_geoip_proto_goTypes = nil
	file_api_grpc_geoip_proto_depIdxs = nil
}
