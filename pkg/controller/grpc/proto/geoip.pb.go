// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: api/grpc/geoip.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CountryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CountryRequest) Reset() {
	*x = CountryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryRequest) ProtoMessage() {}

func (x *CountryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryRequest.ProtoReflect.Descriptor instead.
func (*CountryRequest) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{0}
}

func (x *CountryRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type CityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Isp     *bool  `protobuf:"varint,2,opt,name=isp,proto3,oneof" json:"isp,omitempty"`
}

func (x *CityRequest) Reset() {
	*x = CityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityRequest) ProtoMessage() {}

func (x *CityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityRequest.ProtoReflect.Descriptor instead.
func (*CityRequest) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{1}
}

func (x *CityRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CityRequest) GetIsp() bool {
	if x != nil && x.Isp != nil {
		return *x.Isp
	}
	return false
}

type CityLiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Lang    string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *CityLiteRequest) Reset() {
	*x = CityLiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityLiteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityLiteRequest) ProtoMessage() {}

func (x *CityLiteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityLiteRequest.ProtoReflect.Descriptor instead.
func (*CityLiteRequest) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{2}
}

func (x *CityLiteRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CityLiteRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type CountryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Continent          *Continent          `protobuf:"bytes,1,opt,name=continent,proto3" json:"continent,omitempty"`
	Country            *Country            `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	RegisteredCountry  *Country            `protobuf:"bytes,3,opt,name=registered_country,json=registeredCountry,proto3" json:"registered_country,omitempty"`
	RepresentedCountry *RepresentedCountry `protobuf:"bytes,4,opt,name=represented_country,json=representedCountry,proto3" json:"represented_country,omitempty"`
	Traits             *Traits             `protobuf:"bytes,5,opt,name=traits,proto3" json:"traits,omitempty"`
}

func (x *CountryResponse) Reset() {
	*x = CountryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryResponse) ProtoMessage() {}

func (x *CountryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryResponse.ProtoReflect.Descriptor instead.
func (*CountryResponse) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{3}
}

func (x *CountryResponse) GetContinent() *Continent {
	if x != nil {
		return x.Continent
	}
	return nil
}

func (x *CountryResponse) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *CountryResponse) GetRegisteredCountry() *Country {
	if x != nil {
		return x.RegisteredCountry
	}
	return nil
}

func (x *CountryResponse) GetRepresentedCountry() *RepresentedCountry {
	if x != nil {
		return x.RepresentedCountry
	}
	return nil
}

func (x *CountryResponse) GetTraits() *Traits {
	if x != nil {
		return x.Traits
	}
	return nil
}

type CityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City               *City               `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	Continent          *Continent          `protobuf:"bytes,2,opt,name=continent,proto3" json:"continent,omitempty"`
	Country            *Country            `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Location           *Location           `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Postal             *Postal             `protobuf:"bytes,5,opt,name=postal,proto3" json:"postal,omitempty"`
	RegisteredCountry  *Country            `protobuf:"bytes,6,opt,name=registered_country,json=registeredCountry,proto3" json:"registered_country,omitempty"`
	RepresentedCountry *RepresentedCountry `protobuf:"bytes,7,opt,name=represented_country,json=representedCountry,proto3" json:"represented_country,omitempty"`
	Subdivisions       []*Subdivision      `protobuf:"bytes,8,rep,name=subdivisions,proto3" json:"subdivisions,omitempty"`
	Traits             *Traits             `protobuf:"bytes,9,opt,name=traits,proto3" json:"traits,omitempty"`
	Isp                *ISP                `protobuf:"bytes,10,opt,name=isp,proto3,oneof" json:"isp,omitempty"`
}

func (x *CityResponse) Reset() {
	*x = CityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityResponse) ProtoMessage() {}

func (x *CityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityResponse.ProtoReflect.Descriptor instead.
func (*CityResponse) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{4}
}

func (x *CityResponse) GetCity() *City {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *CityResponse) GetContinent() *Continent {
	if x != nil {
		return x.Continent
	}
	return nil
}

func (x *CityResponse) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *CityResponse) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CityResponse) GetPostal() *Postal {
	if x != nil {
		return x.Postal
	}
	return nil
}

func (x *CityResponse) GetRegisteredCountry() *Country {
	if x != nil {
		return x.RegisteredCountry
	}
	return nil
}

func (x *CityResponse) GetRepresentedCountry() *RepresentedCountry {
	if x != nil {
		return x.RepresentedCountry
	}
	return nil
}

func (x *CityResponse) GetSubdivisions() []*Subdivision {
	if x != nil {
		return x.Subdivisions
	}
	return nil
}

func (x *CityResponse) GetTraits() *Traits {
	if x != nil {
		return x.Traits
	}
	return nil
}

func (x *CityResponse) GetIsp() *ISP {
	if x != nil {
		return x.Isp
	}
	return nil
}

type CityLiteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City     *CityLiteResponse_City     `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	Country  *CityLiteResponse_Country  `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Location *CityLiteResponse_Location `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *CityLiteResponse) Reset() {
	*x = CityLiteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityLiteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityLiteResponse) ProtoMessage() {}

func (x *CityLiteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityLiteResponse.ProtoReflect.Descriptor instead.
func (*CityLiteResponse) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{5}
}

func (x *CityLiteResponse) GetCity() *CityLiteResponse_City {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *CityLiteResponse) GetCountry() *CityLiteResponse_Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *CityLiteResponse) GetLocation() *CityLiteResponse_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type Continent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      string            `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	GeoNameId uint32            `protobuf:"varint,2,opt,name=geo_name_id,json=geoNameId,proto3" json:"geo_name_id,omitempty"`
	Names     map[string]string `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Continent) Reset() {
	*x = Continent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Continent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Continent) ProtoMessage() {}

func (x *Continent) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Continent.ProtoReflect.Descriptor instead.
func (*Continent) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{6}
}

func (x *Continent) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Continent) GetGeoNameId() uint32 {
	if x != nil {
		return x.GeoNameId
	}
	return 0
}

func (x *Continent) GetNames() map[string]string {
	if x != nil {
		return x.Names
	}
	return nil
}

type Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeoNameId         uint32            `protobuf:"varint,1,opt,name=geo_name_id,json=geoNameId,proto3" json:"geo_name_id,omitempty"`
	IsInEuropeanUnion bool              `protobuf:"varint,2,opt,name=is_in_european_union,json=isInEuropeanUnion,proto3" json:"is_in_european_union,omitempty"`
	IsoCode           string            `protobuf:"bytes,3,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	Names             map[string]string `protobuf:"bytes,4,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Country) Reset() {
	*x = Country{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{7}
}

func (x *Country) GetGeoNameId() uint32 {
	if x != nil {
		return x.GeoNameId
	}
	return 0
}

func (x *Country) GetIsInEuropeanUnion() bool {
	if x != nil {
		return x.IsInEuropeanUnion
	}
	return false
}

func (x *Country) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *Country) GetNames() map[string]string {
	if x != nil {
		return x.Names
	}
	return nil
}

type RepresentedCountry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeoNameId         uint32            `protobuf:"varint,1,opt,name=geo_name_id,json=geoNameId,proto3" json:"geo_name_id,omitempty"`
	IsInEuropeanUnion bool              `protobuf:"varint,2,opt,name=is_in_european_union,json=isInEuropeanUnion,proto3" json:"is_in_european_union,omitempty"`
	IsoCode           string            `protobuf:"bytes,3,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	Names             map[string]string `protobuf:"bytes,4,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Type              string            `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *RepresentedCountry) Reset() {
	*x = RepresentedCountry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepresentedCountry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepresentedCountry) ProtoMessage() {}

func (x *RepresentedCountry) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepresentedCountry.ProtoReflect.Descriptor instead.
func (*RepresentedCountry) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{8}
}

func (x *RepresentedCountry) GetGeoNameId() uint32 {
	if x != nil {
		return x.GeoNameId
	}
	return 0
}

func (x *RepresentedCountry) GetIsInEuropeanUnion() bool {
	if x != nil {
		return x.IsInEuropeanUnion
	}
	return false
}

func (x *RepresentedCountry) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *RepresentedCountry) GetNames() map[string]string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *RepresentedCountry) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Traits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAnonymousProxy    bool `protobuf:"varint,1,opt,name=is_anonymous_proxy,json=isAnonymousProxy,proto3" json:"is_anonymous_proxy,omitempty"`
	IsSatelliteProvider bool `protobuf:"varint,2,opt,name=is_satellite_provider,json=isSatelliteProvider,proto3" json:"is_satellite_provider,omitempty"`
}

func (x *Traits) Reset() {
	*x = Traits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Traits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Traits) ProtoMessage() {}

func (x *Traits) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Traits.ProtoReflect.Descriptor instead.
func (*Traits) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{9}
}

func (x *Traits) GetIsAnonymousProxy() bool {
	if x != nil {
		return x.IsAnonymousProxy
	}
	return false
}

func (x *Traits) GetIsSatelliteProvider() bool {
	if x != nil {
		return x.IsSatelliteProvider
	}
	return false
}

type City struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeoNameId uint32            `protobuf:"varint,1,opt,name=geo_name_id,json=geoNameId,proto3" json:"geo_name_id,omitempty"`
	Names     map[string]string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *City) Reset() {
	*x = City{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *City) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*City) ProtoMessage() {}

func (x *City) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use City.ProtoReflect.Descriptor instead.
func (*City) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{10}
}

func (x *City) GetGeoNameId() uint32 {
	if x != nil {
		return x.GeoNameId
	}
	return 0
}

func (x *City) GetNames() map[string]string {
	if x != nil {
		return x.Names
	}
	return nil
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccuracyRadius uint32  `protobuf:"varint,1,opt,name=accuracy_radius,json=accuracyRadius,proto3" json:"accuracy_radius,omitempty"`
	Latitude       float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude      float64 `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	MetroCode      uint32  `protobuf:"varint,4,opt,name=metro_code,json=metroCode,proto3" json:"metro_code,omitempty"`
	TimeZone       string  `protobuf:"bytes,5,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{11}
}

func (x *Location) GetAccuracyRadius() uint32 {
	if x != nil {
		return x.AccuracyRadius
	}
	return 0
}

func (x *Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Location) GetMetroCode() uint32 {
	if x != nil {
		return x.MetroCode
	}
	return 0
}

func (x *Location) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

type Postal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Postal) Reset() {
	*x = Postal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Postal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Postal) ProtoMessage() {}

func (x *Postal) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Postal.ProtoReflect.Descriptor instead.
func (*Postal) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{12}
}

func (x *Postal) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type Subdivision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeoNameId uint32            `protobuf:"varint,1,opt,name=geo_name_id,json=geoNameId,proto3" json:"geo_name_id,omitempty"`
	IsoCode   string            `protobuf:"bytes,2,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	Names     map[string]string `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Subdivision) Reset() {
	*x = Subdivision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subdivision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subdivision) ProtoMessage() {}

func (x *Subdivision) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subdivision.ProtoReflect.Descriptor instead.
func (*Subdivision) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{13}
}

func (x *Subdivision) GetGeoNameId() uint32 {
	if x != nil {
		return x.GeoNameId
	}
	return 0
}

func (x *Subdivision) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *Subdivision) GetNames() map[string]string {
	if x != nil {
		return x.Names
	}
	return nil
}

type ISP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutonomousSystemOrganization string `protobuf:"bytes,1,opt,name=autonomous_system_organization,json=autonomousSystemOrganization,proto3" json:"autonomous_system_organization,omitempty"`
	Isp                          string `protobuf:"bytes,2,opt,name=isp,proto3" json:"isp,omitempty"`
	MobileCountryCode            string `protobuf:"bytes,3,opt,name=mobile_country_code,json=mobileCountryCode,proto3" json:"mobile_country_code,omitempty"`
	MobileNetworkCode            string `protobuf:"bytes,4,opt,name=mobile_network_code,json=mobileNetworkCode,proto3" json:"mobile_network_code,omitempty"`
	Organization                 string `protobuf:"bytes,5,opt,name=organization,proto3" json:"organization,omitempty"`
	AutonomousSystemNumber       uint32 `protobuf:"varint,6,opt,name=autonomous_system_number,json=autonomousSystemNumber,proto3" json:"autonomous_system_number,omitempty"`
}

func (x *ISP) Reset() {
	*x = ISP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ISP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISP) ProtoMessage() {}

func (x *ISP) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISP.ProtoReflect.Descriptor instead.
func (*ISP) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{14}
}

func (x *ISP) GetAutonomousSystemOrganization() string {
	if x != nil {
		return x.AutonomousSystemOrganization
	}
	return ""
}

func (x *ISP) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *ISP) GetMobileCountryCode() string {
	if x != nil {
		return x.MobileCountryCode
	}
	return ""
}

func (x *ISP) GetMobileNetworkCode() string {
	if x != nil {
		return x.MobileNetworkCode
	}
	return ""
}

func (x *ISP) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *ISP) GetAutonomousSystemNumber() uint32 {
	if x != nil {
		return x.AutonomousSystemNumber
	}
	return 0
}

type CityLiteResponse_City struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CityLiteResponse_City) Reset() {
	*x = CityLiteResponse_City{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityLiteResponse_City) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityLiteResponse_City) ProtoMessage() {}

func (x *CityLiteResponse_City) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityLiteResponse_City.ProtoReflect.Descriptor instead.
func (*CityLiteResponse_City) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CityLiteResponse_City) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CityLiteResponse_Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsoCode string `protobuf:"bytes,3,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	Name    string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CityLiteResponse_Country) Reset() {
	*x = CityLiteResponse_Country{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityLiteResponse_Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityLiteResponse_Country) ProtoMessage() {}

func (x *CityLiteResponse_Country) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityLiteResponse_Country.ProtoReflect.Descriptor instead.
func (*CityLiteResponse_Country) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{5, 1}
}

func (x *CityLiteResponse_Country) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *CityLiteResponse_Country) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CityLiteResponse_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	TimeZone  string  `protobuf:"bytes,5,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
}

func (x *CityLiteResponse_Location) Reset() {
	*x = CityLiteResponse_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_geoip_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityLiteResponse_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityLiteResponse_Location) ProtoMessage() {}

func (x *CityLiteResponse_Location) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_geoip_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityLiteResponse_Location.ProtoReflect.Descriptor instead.
func (*CityLiteResponse_Location) Descriptor() ([]byte, []int) {
	return file_api_grpc_geoip_proto_rawDescGZIP(), []int{5, 2}
}

func (x *CityLiteResponse_Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *CityLiteResponse_Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *CityLiteResponse_Location) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

var File_api_grpc_geoip_proto protoreflect.FileDescriptor

var file_api_grpc_geoip_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65, 0x6f, 0x69, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x22, 0x2a, 0x0a,
	0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x46, 0x0a, 0x0b, 0x43, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x69, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x03, 0x69, 0x73, 0x70, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x69, 0x73,
	0x70, 0x22, 0x3f, 0x0a, 0x0f, 0x43, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x22, 0x9d, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x65, 0x6f, 0x69,
	0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x3d, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67,
	0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x4a, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x65, 0x6f, 0x69, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x65,
	0x6f, 0x69, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x52, 0x06, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x22, 0xf2, 0x03, 0x0a, 0x0c, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x06, 0x70,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x65,
	0x6f, 0x69, 0x70, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x36, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x53, 0x75, 0x62, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x54, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x52, 0x06, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x03,
	0x69, 0x73, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x65, 0x6f, 0x69,
	0x70, 0x2e, 0x49, 0x53, 0x50, 0x48, 0x00, 0x52, 0x03, 0x69, 0x73, 0x70, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x69, 0x73, 0x70, 0x22, 0xf6, 0x02, 0x0a, 0x10, 0x43, 0x69, 0x74, 0x79,
	0x4c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x65, 0x6f,
	0x69, 0x70, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x39,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x65,
	0x6f, 0x69, 0x70, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1a, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0x38, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x61, 0x0a,
	0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x22, 0xac, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xe0, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x67,
	0x65, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x67, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x69,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x5f, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x49, 0x6e, 0x45,
	0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x8a, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x65, 0x6f,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x67, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x49, 0x6e, 0x45, 0x75, 0x72,
	0x6f, 0x70, 0x65, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73,
	0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x6a, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f,
	0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f,
	0x75, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x73, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x04,
	0x43, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x65, 0x6f, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x01, 0x0a,
	0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x52, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x74, 0x72, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x1c, 0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x64, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x65, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x33, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x53, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x9b, 0x02, 0x0a, 0x03, 0x49, 0x53, 0x50, 0x12, 0x44, 0x0a, 0x1e, 0x61, 0x75, 0x74, 0x6f,
	0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1c, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x73, 0x70,
	0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f,
	0x75, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f,
	0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x32, 0xb6,
	0x01, 0x0a, 0x0c, 0x47, 0x65, 0x6f, 0x49, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x38, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x15, 0x2e, 0x67, 0x65, 0x6f,
	0x69, 0x70, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x43, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x43, 0x69,
	0x74, 0x79, 0x4c, 0x69, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43,
	0x69, 0x74, 0x79, 0x4c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_grpc_geoip_proto_rawDescOnce sync.Once
	file_api_grpc_geoip_proto_rawDescData = file_api_grpc_geoip_proto_rawDesc
)

func file_api_grpc_geoip_proto_rawDescGZIP() []byte {
	file_api_grpc_geoip_proto_rawDescOnce.Do(func() {
		file_api_grpc_geoip_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_grpc_geoip_proto_rawDescData)
	})
	return file_api_grpc_geoip_proto_rawDescData
}

var file_api_grpc_geoip_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_api_grpc_geoip_proto_goTypes = []interface{}{
	(*CountryRequest)(nil),            // 0: geoip.CountryRequest
	(*CityRequest)(nil),               // 1: geoip.CityRequest
	(*CityLiteRequest)(nil),           // 2: geoip.CityLiteRequest
	(*CountryResponse)(nil),           // 3: geoip.CountryResponse
	(*CityResponse)(nil),              // 4: geoip.CityResponse
	(*CityLiteResponse)(nil),          // 5: geoip.CityLiteResponse
	(*Continent)(nil),                 // 6: geoip.Continent
	(*Country)(nil),                   // 7: geoip.Country
	(*RepresentedCountry)(nil),        // 8: geoip.RepresentedCountry
	(*Traits)(nil),                    // 9: geoip.Traits
	(*City)(nil),                      // 10: geoip.City
	(*Location)(nil),                  // 11: geoip.Location
	(*Postal)(nil),                    // 12: geoip.Postal
	(*Subdivision)(nil),               // 13: geoip.Subdivision
	(*ISP)(nil),                       // 14: geoip.ISP
	(*CityLiteResponse_City)(nil),     // 15: geoip.CityLiteResponse.City
	(*CityLiteResponse_Country)(nil),  // 16: geoip.CityLiteResponse.Country
	(*CityLiteResponse_Location)(nil), // 17: geoip.CityLiteResponse.Location
	nil,                               // 18: geoip.Continent.NamesEntry
	nil,                               // 19: geoip.Country.NamesEntry
	nil,                               // 20: geoip.RepresentedCountry.NamesEntry
	nil,                               // 21: geoip.City.NamesEntry
	nil,                               // 22: geoip.Subdivision.NamesEntry
}
var file_api_grpc_geoip_proto_depIdxs = []int32{
	6,  // 0: geoip.CountryResponse.continent:type_name -> geoip.Continent
	7,  // 1: geoip.CountryResponse.country:type_name -> geoip.Country
	7,  // 2: geoip.CountryResponse.registered_country:type_name -> geoip.Country
	8,  // 3: geoip.CountryResponse.represented_country:type_name -> geoip.RepresentedCountry
	9,  // 4: geoip.CountryResponse.traits:type_name -> geoip.Traits
	10, // 5: geoip.CityResponse.city:type_name -> geoip.City
	6,  // 6: geoip.CityResponse.continent:type_name -> geoip.Continent
	7,  // 7: geoip.CityResponse.country:type_name -> geoip.Country
	11, // 8: geoip.CityResponse.location:type_name -> geoip.Location
	12, // 9: geoip.CityResponse.postal:type_name -> geoip.Postal
	7,  // 10: geoip.CityResponse.registered_country:type_name -> geoip.Country
	8,  // 11: geoip.CityResponse.represented_country:type_name -> geoip.RepresentedCountry
	13, // 12: geoip.CityResponse.subdivisions:type_name -> geoip.Subdivision
	9,  // 13: geoip.CityResponse.traits:type_name -> geoip.Traits
	14, // 14: geoip.CityResponse.isp:type_name -> geoip.ISP
	15, // 15: geoip.CityLiteResponse.city:type_name -> geoip.CityLiteResponse.City
	16, // 16: geoip.CityLiteResponse.country:type_name -> geoip.CityLiteResponse.Country
	17, // 17: geoip.CityLiteResponse.location:type_name -> geoip.CityLiteResponse.Location
	18, // 18: geoip.Continent.names:type_name -> geoip.Continent.NamesEntry
	19, // 19: geoip.Country.names:type_name -> geoip.Country.NamesEntry
	20, // 20: geoip.RepresentedCountry.names:type_name -> geoip.RepresentedCountry.NamesEntry
	21, // 21: geoip.City.names:type_name -> geoip.City.NamesEntry
	22, // 22: geoip.Subdivision.names:type_name -> geoip.Subdivision.NamesEntry
	0,  // 23: geoip.GeoIpService.Country:input_type -> geoip.CountryRequest
	1,  // 24: geoip.GeoIpService.City:input_type -> geoip.CityRequest
	2,  // 25: geoip.GeoIpService.CityLite:input_type -> geoip.CityLiteRequest
	3,  // 26: geoip.GeoIpService.Country:output_type -> geoip.CountryResponse
	4,  // 27: geoip.GeoIpService.City:output_type -> geoip.CityResponse
	5,  // 28: geoip.GeoIpService.CityLite:output_type -> geoip.CityLiteResponse
	26, // [26:29] is the sub-list for method output_type
	23, // [23:26] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_api_grpc_geoip_proto_init() }
func file_api_grpc_geoip_proto_init() {
	if File_api_grpc_geoip_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_grpc_geoip_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityLiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityLiteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Continent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Country); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepresentedCountry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Traits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*City); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Postal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subdivision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ISP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityLiteResponse_City); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityLiteResponse_Country); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_geoip_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityLiteResponse_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_grpc_geoip_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_api_grpc_geoip_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_grpc_geoip_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_grpc_geoip_proto_goTypes,
		DependencyIndexes: file_api_grpc_geoip_proto_depIdxs,
		MessageInfos:      file_api_grpc_geoip_proto_msgTypes,
	}.Build()
	File_api_grpc_geoip_proto = out.File
	file_api_grpc_geoip_proto_rawDesc = nil
	file_api_grpc_geoip_proto_goTypes = nil
	file_api_grpc_geoip_proto_depIdxs = nil
}
